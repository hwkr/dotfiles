#!/usr/bin/env bash
#
# bootstrap installs things.

#cd "$(dirname "$0")/.."
DOTFILES_ROOT=$(pwd)

set -e

echo ''

info () {
  printf "  [ \033[00;34m..\033[0m ] $1"
}

user () {
  printf "\r  [ \033[0;34m?\033[0m ] $1 "
}

success () {
  printf "\r\033[2K  [ \033[00;32mOK\033[0m ] $1\n"
}

fail () {
  printf "\r\033[2K  [\033[0;31mFAIL\033[0m] $1\n"
  echo ''
  exit
}

warn () {
  printf "\r\033[2K  [\033[0;33mWARN\033[0m] $1\n"
  echo ''
  exit
}

setup_gitconfig () {
  if ! [ -f shell/gitconfig.symlink ]
  then
    info 'setup gitconfig'


    user ' - What is your github author name?'
    read -e git_authorname
    user ' - What is your github author email?'
    read -e git_authoremail

    git_credential='cache'
    if [ "$(uname -s)" == "Darwin" ]
    then
      git_credential='osxkeychain'
    else
      user ' - What credential store would you like to use?'
      read -e git_credential
    fi

    sed -e "s#AUTHORNAME#$git_authorname#g" -e "s#AUTHOREMAIL#$git_authoremail#g" -e "s#GIT_CREDENTIAL_HELPER#$git_credential#g" shell/gitconfig.symlink.template > shell/gitconfig.symlink

    success 'gitconfig'
  fi
}

link_file () {
  local src=$1 dst=$2

  local overwrite= backup= skip=
  local action=

  if [ -f "$dst" -o -d "$dst" -o -L "$dst" ]
  then

    if [ "$overwrite_all" == "false" ] && [ "$backup_all" == "false" ] && [ "$skip_all" == "false" ]
    then

      local currentSrc="$(readlink $dst)"

      if [ "$currentSrc" == "$src" ]
      then

        skip=true;

      else

        user "File already exists: $dst ($(basename "$src")), what do you want to do?\n\
        [s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all?"
        read -n 1 action

        case "$action" in
          o )
            overwrite=true;;
          O )
            overwrite_all=true;;
          b )
            backup=true;;
          B )
            backup_all=true;;
          s )
            skip=true;;
          S )
            skip_all=true;;
          * )
            ;;
        esac

      fi

    fi

    overwrite=${overwrite:-$overwrite_all}
    backup=${backup:-$backup_all}
    skip=${skip:-$skip_all}

    if [ "$overwrite" == "true" ]
    then
      rm -rf "$dst"
      success "removed $dst"
    fi

    if [ "$backup" == "true" ]
    then
      mv "$dst" "${dst}.backup"
      success "moved $dst to ${dst}.backup"
    fi

    if [ "$skip" == "true" ]
    then
      success "skipped $src"
    fi
  fi

  if [ "$skip" != "true" ]  # "false" or empty
  then
    ln -s "$1" "$2"
    success "linked $1 to $2"
  fi
}

install_dotfiles () {
  info 'installing dotfiles'

  local overwrite_all=false backup_all=false skip_all=false

  for src in $(find -H "$DOTFILES_ROOT/shell" -maxdepth 2 -name '*.symlink')
  do
    dst="$HOME/.$(basename "${src%.*}")"
    link_file "$src" "$dst"
  done

}

install_vscode_settings () {
  info 'installing vscode settings'

  local overwrite_all=false backup_all=false skip_all=false

  for src in $(find -H "$DOTFILES_ROOT/vscode" -maxdepth 2 -name '*')
  do
    dst="$HOME/Library/Application Support/Code/User/$(basename "${src}")"
    link_file "$src" "$dst"

    dst="$HOME/Library/Application Support/Cursor/User/$(basename "${src}")"
    link_file "$src" "$dst"
  done

}

install_scripts () {
  info 'installing scripts'

  if ! [ -w /usr/local/bin/ ]
  then
    warn "don't have permissions to link scripts"
  fi

  local overwrite_all=false backup_all=false skip_all=false

  for src in $(find -H "$DOTFILES_ROOT/scripts/shell" -maxdepth 2 -name '*.symlink')
  do
    dst="/usr/local/bin/$(basename "${src%.*}")"
    link_file "$src" "$dst"
  done
}

setup_gitconfig
install_dotfiles
install_vscode_settings
install_scripts

echo ''
echo '  All installed!'
